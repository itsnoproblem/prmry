// Code generated by templ@v0.2.334 DO NOT EDIT.

package interactions

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"

	"github.com/itsnoproblem/prmry/internal/components"
	"github.com/itsnoproblem/prmry/internal/components/chat"
)

func InteractionDetailPage(view chat.DetailView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			err = InteractionDetail(view).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = components.Page(&view).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func InteractionsListPage(view ListView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_4 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			err = InteractionsList(view).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = components.Page(&view).Render(templ.WithChildren(ctx, var_4), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func InteractionDetail(view chat.DetailView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"post-container detail interaction\"><div class=\"interaction-meta\"><div class=\"btn-group\" role=\"group\"><a aria-label=\"go back\" hx-get=\"/interactions\" hx-target=\"#content-root\" hx-push-url=\"true\"><span class=\"fa fa-circle-left\" aria-hidden=\"true\"></span></a><div style=\"float: left\"><div class=\"interaction-date\">")
		if err != nil {
			return err
		}
		var var_6 string = view.Date
		_, err = templBuffer.WriteString(templ.EscapeString(var_6))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"interaction-summary\"><span class=\"pure-button pure-button-primary\">")
		if err != nil {
			return err
		}
		var_7 := `Flow: `
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		var var_8 string = view.FlowName
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_9 := `|`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span><span class=\"pure-button pure-button-primary\">")
		if err != nil {
			return err
		}
		var_10 := `Model: `
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		var var_11 string = view.Model
		_, err = templBuffer.WriteString(templ.EscapeString(var_11))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_12 := `|`
		_, err = templBuffer.WriteString(var_12)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span><span class=\"pure-button pure-button-primary\">")
		if err != nil {
			return err
		}
		var var_13 string = view.Usage.TotalTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_13))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_14 := `tokens`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></div></div></div></div></div><div class=\"content-wrapper\"><div class=\"prompt-display text-lg-left\">")
		if err != nil {
			return err
		}
		err = components.NewlineToBR(view.PromptHTML).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"post-description\"><div class=\"response-display\">")
		if err != nil {
			return err
		}
		err = components.NewlineToBR(view.ResponseHTML).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div><ul class=\"usage\"><li class=\"usage-prompt\"><b>")
		if err != nil {
			return err
		}
		var_15 := `prompt`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b><hr>")
		if err != nil {
			return err
		}
		var var_16 string = view.Usage.PromptTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_16))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_17 := `tokens`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"operator\">")
		if err != nil {
			return err
		}
		var_18 := `+`
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"usage-completion\"><b>")
		if err != nil {
			return err
		}
		var_19 := `completion`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b><hr>")
		if err != nil {
			return err
		}
		var var_20 string = view.Usage.CompletionTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_20))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_21 := `tokens`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"operator\">")
		if err != nil {
			return err
		}
		var_22 := `=`
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"usage-total\"><b>")
		if err != nil {
			return err
		}
		var_23 := `total`
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b><hr>")
		if err != nil {
			return err
		}
		var var_24 string = view.Usage.TotalTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_24))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_25 := `tokens`
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func InteractionsList(view ListView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_26 := templ.GetChildren(ctx)
		if var_26 == nil {
			var_26 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"posts\"><h1 class=\"content-subhead\">")
		if err != nil {
			return err
		}
		var_27 := `Recent Interactions`
		_, err = templBuffer.WriteString(var_27)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1>")
		if err != nil {
			return err
		}
		for _, item := range view.Interactions {
			_, err = templBuffer.WriteString("<section class=\"post\"><header class=\"post-header\"><img width=\"48\" height=\"48\" alt=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(view.User().Name))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"post-avatar pure-img\" src=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(view.User().AvatarURL))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><h2 class=\"post-title list-post-title\"><a hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("/interactions/" + item.ID))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"#content-root\" hx-push-url=\"true\">")
			if err != nil {
				return err
			}
			var var_28 string = item.Prompt
			_, err = templBuffer.WriteString(templ.EscapeString(var_28))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></h2><p class=\"post-meta\"><span class=\"text-info\"><b>")
			if err != nil {
				return err
			}
			var var_29 string = item.Date
			_, err = templBuffer.WriteString(templ.EscapeString(var_29))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</b></span> ")
			if err != nil {
				return err
			}
			var_30 := `&nbsp; &mdash; &nbsp;`
			_, err = templBuffer.WriteString(var_30)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			if item.FlowID == "" {
				_, err = templBuffer.WriteString("<span class=\"text-info\">")
				if err != nil {
					return err
				}
				var_31 := `created with `
				_, err = templBuffer.WriteString(var_31)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var_32 := `raw input`
				_, err = templBuffer.WriteString(var_32)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b></span>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<span class=\"text-info\">")
				if err != nil {
					return err
				}
				var_33 := `created via `
				_, err = templBuffer.WriteString(var_33)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<b>")
				if err != nil {
					return err
				}
				var var_34 string = item.FlowName
				_, err = templBuffer.WriteString(templ.EscapeString(var_34))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</b></span>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_35 := `&nbsp;`
			_, err = templBuffer.WriteString(var_35)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<span>")
			if err != nil {
				return err
			}
			var_36 := `using `
			_, err = templBuffer.WriteString(var_36)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<b>")
			if err != nil {
				return err
			}
			var var_37 string = item.Model
			_, err = templBuffer.WriteString(templ.EscapeString(var_37))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</b></span> ")
			if err != nil {
				return err
			}
			var_38 := `&nbsp;`
			_, err = templBuffer.WriteString(var_38)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<span class=\"badge badge-info\">")
			if err != nil {
				return err
			}
			var var_39 string = fmt.Sprintf("%d", item.TokensUsed)
			_, err = templBuffer.WriteString(templ.EscapeString(var_39))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_40 := `tokens`
			_, err = templBuffer.WriteString(var_40)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></p></header></section>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
