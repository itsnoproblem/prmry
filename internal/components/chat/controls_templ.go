// Code generated by templ@v0.2.334 DO NOT EDIT.

package chat

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func ChatControlsOOB(cmp ChatControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container navbar-fixed-bottom\" id=\"chat-controls\" hx-swap-oob=\"true\">")
		if err != nil {
			return err
		}
		err = ChatControlsForm(cmp).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatControls(cmp ChatControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container navbar-fixed-bottom\" id=\"chat-controls\">")
		if err != nil {
			return err
		}
		err = ChatControlsForm(cmp).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatControlsForm(cmp ChatControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form hx-ext=\"json-enc\" id=\"chat-controls-form\" class=\"row\"><div class=\"row\"><div class=\"col-4\">")
		if err != nil {
			return err
		}
		err = FlowSelectorControl(cmp).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"col\">")
		if err != nil {
			return err
		}
		err = InputMessage(cmp).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div></form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func InputMessage(cmp ChatControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"form-group col\"><textarea type=\"text\" class=\"form-control text-light input-dark\" rows=\"10\" aria-label=\"chat prompt\" name=\"prompt\" hx-post=\"/interactions\" hx-target=\"#content-root\" hx-indicator=\"#chat-loader\" hx-trigger=\"keydown[key==&#39;Enter&#39;]\" hx-swap=\"afterend\" autofocus=\"true\" hx-ext=\"disable-element\" hx-disable-element=\"self\" placeholder=\"type something...\"></textarea></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowSelectorControl(cmp ChatControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"form-floating\"><select id=\"flow-selector\" name=\"flowSelector\" class=\"form-select form-select-md\" aria-label=\"Flow Selector\" hx-put=\"/interactions/chat\" hx-target=\"#chat-controls\"><option value=\"\">")
		if err != nil {
			return err
		}
		var_6 := `Send input as-is`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, flw := range cmp.FlowSelector.Flows {
			if flw.ID == cmp.FlowSelector.SelectedFlow {
				_, err = templBuffer.WriteString("<option value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(flw.ID))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" selected>")
				if err != nil {
					return err
				}
				var var_7 string = flw.Name
				_, err = templBuffer.WriteString(templ.EscapeString(var_7))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<option value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(flw.ID))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_8 string = flw.Name
				_, err = templBuffer.WriteString(templ.EscapeString(var_8))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</select><label for=\"flow-selector\">")
		if err != nil {
			return err
		}
		var_9 := `Flow`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label>")
		if err != nil {
			return err
		}
		for key, isRequired := range cmp.FlowSelector.Params {
			if isRequired == "true" {
				_, err = templBuffer.WriteString("<div class=\"form-floating required pt-3\"><input class=\"form-control\" type=\"text\" name=\"flowParams\" id=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString("flow-params-" + key))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" required=\"true\"><label class=\"control-label\" for=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString("flow-params-" + key))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_10 string = key
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label></div>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<div class=\"form-floating pt-3\"><input class=\"form-control\" type=\"text\" name=\"flowParams\" id=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString("flow-params-" + key))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" required=\"true\"><label class=\"control-label\" for=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString("flow-params-" + key))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_11 string = key
				_, err = templBuffer.WriteString(templ.EscapeString(var_11))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label></div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" <input type=\"hidden\" name=\"flowParamNames\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(key))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
		}
		if len(cmp.FlowSelector.Params) > 0 {
			_, err = templBuffer.WriteString("<div class=\"required legend\"><label class=\"control-label\">")
			if err != nil {
				return err
			}
			var_12 := `required`
			_, err = templBuffer.WriteString(var_12)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
