// Code generated by templ@v0.2.334 DO NOT EDIT.

package chat

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/itsnoproblem/prmry/internal/components"

func ChatPage(cmp ControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			err = ChatConsole(cmp).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = components.Page(&cmp).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatConsole(cmp ControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"container\" id=\"chat-content\"><div id=\"chat-content-root\"></div><span id=\"chat-loader\" class=\"htmx-indicator loader\"></span>")
		if err != nil {
			return err
		}
		err = ChatControls(cmp).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowExecutionPreview(cmp ControlsView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"row\" id=\"flow-preview\"><div></div><span id=\"preview-loader\" class=\"htmx-indicator loader\"></span></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatResponse(cmp ResponseView) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = ChatControlsOOB(cmp.Controls).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"container\"><div class=\"interaction-meta\"><div class=\"btn-group\" role=\"group\"><a class=\"btn btn-link\" aria-label=\"go back\" hx-get=\"/interactions\" hx-target=\"#content-root\" hx-push-url=\"true\"><span class=\"fa fa-circle-left\" aria-hidden=\"true\"></span></a><div style=\"float: left\"><div class=\"interaction-date\">")
		if err != nil {
			return err
		}
		var var_6 string = cmp.Interaction.Date
		_, err = templBuffer.WriteString(templ.EscapeString(var_6))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"interaction-summary\"><span class=\"pure-button pure-button-primary\">")
		if err != nil {
			return err
		}
		var_7 := `Model: `
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		var var_8 string = cmp.Interaction.Model
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_9 := `|`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span><span class=\"pure-button pure-button-primary\">")
		if err != nil {
			return err
		}
		var var_10 string = cmp.Interaction.Usage.TotalTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_10))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_11 := `tokens`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></div></div></div></div></div><div class=\"content-wrapper\"><div id=\"prompt-display\" class=\"prompt-display collapsed text-lg-left\">")
		if err != nil {
			return err
		}
		err = components.NewlineToBR(cmp.Interaction.PromptHTML).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"post-description collapsed\"><div id=\"response-display\" class=\"response-display\" id=\"response-display\">")
		if err != nil {
			return err
		}
		err = components.NewlineToBR(cmp.Interaction.ResponseHTML).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div><ul class=\"usage\"><li class=\"usage-prompt\"><b>")
		if err != nil {
			return err
		}
		var_12 := `prompt`
		_, err = templBuffer.WriteString(var_12)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b><hr>")
		if err != nil {
			return err
		}
		var var_13 string = cmp.Interaction.Usage.PromptTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_13))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_14 := `tokens`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"operator\">")
		if err != nil {
			return err
		}
		var_15 := `+`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"usage-completion\"><b>")
		if err != nil {
			return err
		}
		var_16 := `completion`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b><hr>")
		if err != nil {
			return err
		}
		var var_17 string = cmp.Interaction.Usage.CompletionTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_17))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_18 := `tokens`
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"operator\">")
		if err != nil {
			return err
		}
		var_19 := `=`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><li class=\"usage-total\"><b>")
		if err != nil {
			return err
		}
		var_20 := `total`
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b><hr>")
		if err != nil {
			return err
		}
		var var_21 string = cmp.Interaction.Usage.TotalTokens
		_, err = templBuffer.WriteString(templ.EscapeString(var_21))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_22 := `tokens`
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
