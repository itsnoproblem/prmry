// Code generated by templ@v0.2.334 DO NOT EDIT.

package flow

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/itsnoproblem/prmry/internal/components"
)

func FlowBuilderPage(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			err = FlowBuilder(view).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = components.Page(&view).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowBuilder(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form id=\"flow-builder\" hx-post=\"/flows\" hx-target=\"#content-root\" hx-push-url=\"false\" hx-ext=\"json-enc\"><input type=\"hidden\" name=\"id\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(view.ID))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"selectedTab\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(view.SelectedTab))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"row\"><div class=\"col-12 col-md-5\"><div class=\"form-floating pb-4\"><input id=\"flow-name\" name=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Welcome Flow\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(view.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><label for=\"flow-name\">")
		if err != nil {
			return err
		}
		var_4 := `Flow Name`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div>")
		if err != nil {
			return err
		}
		err = PromptEditor(view).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		err = FlowBuilderTabs(view).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><hr class=\"text-info mb-4 mt-4\"><div class=\"d-flex justify-content-center\"><div class=\"pe-4\"><button class=\"btn btn-secondary\" hx-get=\"/flows\" hx-target=\"#content-root\" hx-push-url=\"true\" hx-confirm=\"Abandon changes?\">")
		if err != nil {
			return err
		}
		var_5 := `Cancel`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div><div><input class=\"btn btn-primary\" type=\"submit\" value=\"Save\"></div></div></form>")
		if err != nil {
			return err
		}
		err = FlowBuilderScripts().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowBuilderTabs(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"flow-builder-tabs\" class=\"col-12 col-md-7\"><ul class=\"nav nav-tabs pb-2\">")
		if err != nil {
			return err
		}
		err = TabNav(TabNameTrigger, "Trigger", view.SelectedTab == TabNameTrigger || view.SelectedTab == "").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabNav(TabNameInputs, "Inputs", view.SelectedTab == TabNameInputs).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabNav(TabNamePreview, "Preview", view.SelectedTab == TabNamePreview).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</ul><div id=\"tab-content\" class=\"tab-content pt-2\">")
		if err != nil {
			return err
		}
		err = TabPanel(view.SelectedTab == TabNameTrigger || view.SelectedTab == "", RuleBuilder(view)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabPanel(view.SelectedTab == TabNameInputs, Inputs(view)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabPanel(view.SelectedTab == TabNamePreview, Preview(view)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowBuilderScripts() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"flow-builder-scripts\" hx-script=\"true\"><script>")
		if err != nil {
			return err
		}
		var_8 := `
            (() => {
                let editor = getPromptEditor();

                editor.innerHTML = parse(editor.innerText);
                editor.removeEventListener("input", handleEditorInput);
                editor.addEventListener("input", handleEditorInput);

                editor.removeEventListener("paste", plainTextPaste);
                editor.addEventListener("paste", plainTextPaste);
            })()
        `
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
