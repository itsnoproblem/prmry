// Code generated by templ@v0.2.334 DO NOT EDIT.

package flow

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"

	"github.com/itsnoproblem/prmry/internal/components"
	"github.com/itsnoproblem/prmry/internal/flow"
)

func FlowBuilderPage(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			err = FlowBuilder(view).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = components.Page(&view).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowBuilder(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = FlowBuilderScripts().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<form id=\"flow-builder\" hx-post=\"/flows\" hx-target=\"#content-root\" hx-push-url=\"false\" hx-ext=\"json-enc\"><input type=\"hidden\" name=\"id\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(view.ID))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"selectedTab\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(view.SelectedTab))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"row\"><div class=\"col col-5\">")
		if err != nil {
			return err
		}
		err = FlowName(view).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = PromptEditor(view).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"col col-7\"><ul class=\"nav nav-tabs pb-3\">")
		if err != nil {
			return err
		}
		err = TabNav(TabNameTrigger, "Trigger", view.SelectedTab == TabNameTrigger || view.SelectedTab == "").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabNav(TabNameInputs, "Inputs", view.SelectedTab == TabNameInputs).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabNav(TabNamePreview, "Preview", view.SelectedTab == TabNamePreview).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabNav(TabNameLogs, "Logs", view.SelectedTab == TabNameLogs).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</ul><div class=\"tab-content\">")
		if err != nil {
			return err
		}
		err = TabPanel(view.SelectedTab == TabNameTrigger || view.SelectedTab == "", RuleBuilder(view)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabPanel(view.SelectedTab == TabNameInputs, Inputs(view)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabPanel(view.SelectedTab == TabNamePreview, Preview(view)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = TabPanel(view.SelectedTab == TabNameLogs, Logs()).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div></div><hr class=\"text-info mb-4 mt-4\"><div class=\"row\"><div class=\"col col-1\"><input class=\"btn btn-primary\" type=\"submit\" value=\"Save\"></div><div class=\"col col-1\"><button class=\"btn btn-secondary\" hx-get=\"/flows\" hx-target=\"#content-root\" hx-push-url=\"true\" hx-confirm=\"Abandon changes?\">")
		if err != nil {
			return err
		}
		var_4 := `Cancel`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div><div class=\"col col-10\"></div></div></form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Logs() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_5 := templ.GetChildren(ctx)
		if var_5 == nil {
			var_5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<h1>")
		if err != nil {
			return err
		}
		var_6 := `Logs`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func Preview(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<h2>")
		if err != nil {
			return err
		}
		var var_8 string = view.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><div class=\"row\"><b>")
		if err != nil {
			return err
		}
		var_9 := `Triggered by:`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b>")
		if err != nil {
			return err
		}
		if len(view.Rules) > 0 {
			_, err = templBuffer.WriteString("<ul>")
			if err != nil {
				return err
			}
			for _, rule := range view.Rules {
				_, err = templBuffer.WriteString("<li>")
				if err != nil {
					return err
				}
				var var_10 string = rule.Field.Source
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				if rule.Field.Value != "" {
					var_11 := `(`
					_, err = templBuffer.WriteString(var_11)
					if err != nil {
						return err
					}
					var var_12 string = rule.Field.Value
					_, err = templBuffer.WriteString(templ.EscapeString(var_12))
					if err != nil {
						return err
					}
					var_13 := `)`
					_, err = templBuffer.WriteString(var_13)
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</li> <li>")
				if err != nil {
					return err
				}
				var var_14 string = rule.Condition
				_, err = templBuffer.WriteString(templ.EscapeString(var_14))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</li> <li>")
				if err != nil {
					return err
				}
				var var_15 string = rule.Value
				_, err = templBuffer.WriteString(templ.EscapeString(var_15))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</li>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</ul>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<span class=\"text-body-secondary\">")
			if err != nil {
				return err
			}
			var_16 := `any input`
			_, err = templBuffer.WriteString(var_16)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TabNav(tabID string, label string, isSelected bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_17 := templ.GetChildren(ctx)
		if var_17 == nil {
			var_17 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<li class=\"nav-item border-bottom\"><a hx-put=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/flow-builder/prompt?tab=" + tabID))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-push-url=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("?tab=" + tabID))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if isSelected {
			_, err = templBuffer.WriteString(" class=\"nav-link active\" aria-current=\"page\"")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString(" class=\"nav-link\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		var var_18 string = label
		_, err = templBuffer.WriteString(templ.EscapeString(var_18))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TabPanel(isActive bool, cmp templ.Component) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_19 := templ.GetChildren(ctx)
		if var_19 == nil {
			var_19 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		if !isActive {
			_, err = templBuffer.WriteString(" class=\"d-none\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		err = cmp.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowName(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"form-floating pb-4\"><input id=\"flow-name\" name=\"name\" type=\"text\" class=\"form-control\" placeholder=\"Welcome Flow\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(view.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><label for=\"flow-name\">")
		if err != nil {
			return err
		}
		var_21 := `Flow Name`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func PromptEditor(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_22 := templ.GetChildren(ctx)
		if var_22 == nil {
			var_22 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"mb-3\" hx-ext=\"morph\"><label for=\"promptEditor\" class=\"form-label\">")
		if err != nil {
			return err
		}
		var_23 := `Prompt generated by this flow`
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><div id=\"highlight-container\" class=\"border rounded mb-1\"><div id=\"highlight\"></div><div id=\"promptEditor\" contenteditable=\"true\" class=\"form-control\" hx-swap=\"morph:innerHTML\" hx-put=\"/flow-builder/prompt\" hx-trigger=\"input delay:1100ms from:#promptEditor\">")
		if err != nil {
			return err
		}
		var var_24 string = view.Prompt
		_, err = templBuffer.WriteString(templ.EscapeString(var_24))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div><span class=\"smaller\">")
		if err != nil {
			return err
		}
		var_25 := `indicate prompt arguments with `
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<code>")
		if err != nil {
			return err
		}
		var_26 := `%s`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</code></span><input type=\"hidden\" name=\"prompt\" id=\"promptInput\" value=\"{ view.Prompt }\"><br></div><div class=\"mb-3\">")
		if err != nil {
			return err
		}
		if len(view.PromptArgs) > 0 {
			_, err = templBuffer.WriteString("<div class=\"mb-2\"><label>")
			if err != nil {
				return err
			}
			var_27 := `Prompt Arguments:`
			_, err = templBuffer.WriteString(var_27)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label></div>")
			if err != nil {
				return err
			}
		}
		for j, arg := range view.PromptArgs {
			_, err = templBuffer.WriteString("<div class=\"row mb-3\"><div class=\"form-floating col\">")
			if err != nil {
				return err
			}
			err = FieldSelector(fmt.Sprintf("promptArgs-%d", j), "promptArgs", view.SupportedFields, arg.Source.String(), fmt.Sprintf("Argument %d", j)).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if arg.Source == flow.FieldSourceFlow {
				_, err = templBuffer.WriteString("<div class=\"form-floating col\">")
				if err != nil {
					return err
				}
				err = FieldSelector(fmt.Sprintf("promptArgFlows-%d", j), "promptArgFlows", view.AvailableFlowsByID, arg.Value, "Flow").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			if arg.Source == flow.FieldSourceInputArg {
				_, err = templBuffer.WriteString("<div class=\"form-floating col\"><input type=\"text\" name=\"inputTags\" id=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("promptArg-tagKey-%d", j)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" hx-trigger=\"blur\" hx-put=\"/flow-builder/prompt\" class=\"form-control form-control-md\" placeholder=\"myKey\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(arg.Value))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"><label for=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("promptArg-tagKey-%d", j)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var_28 := `Key name`
				_, err = templBuffer.WriteString(var_28)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</label></div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><script>")
		if err != nil {
			return err
		}
		var_29 := `
        updateHighlight();
    `
		_, err = templBuffer.WriteString(var_29)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func FlowBuilderScripts() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_30 := templ.GetChildren(ctx)
		if var_30 == nil {
			var_30 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div hx-script=\"true\"><script>")
		if err != nil {
			return err
		}
		var_31 := `
            function updateHighlight() {
                const textArea = document.getElementById('promptEditor');
                const promptInput = document.getElementById('promptInput');
                const highlight = document.getElementById('highlight');
                const text = textArea.innerHTML.replace(/^\s+/, "");
                const highlightedText = text.replace(/(%s)/g, '<span class="highlight">$1</span>');

                promptInput.value = text;
                highlight.innerHTML = highlightedText;
            }

            try {
                window.prmry.AddLiveEventListener('input', 'promptEditor', updateHighlight);
                window.prmry.AddLiveEventListener('scroll', 'promptEditor', function() {
                    document.getElementById("highlight").scrollTop = this.scrollTop;
                });
            } catch(e) {
                console.log(e);
            }

            document.addEventListener("DOMContentLoaded", function() {
                // Initialize
                updateHighlight();
            });
        `
		_, err = templBuffer.WriteString(var_31)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
