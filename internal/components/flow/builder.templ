package flow

import (
    "fmt"

    "github.com/itsnoproblem/prmry/internal/components"
    "github.com/itsnoproblem/prmry/internal/flow"
)

templ FlowBuilderPage(view Detail) {
    @components.Page(&view) {
        @FlowBuilder(view)
    }
}

templ FlowBuilder(view Detail) {
    @FlowBuilderScripts()
    <form
            id="flow-builder"
            hx-post="/flows"
            hx-target="#content-root"
            hx-push-url="false"
            hx-ext="json-enc"
    >
        <input type="hidden" name="id" value={ view.ID }/>
        <input type="hidden" name="selectedTab" value={ view.SelectedTab }/>

        <div class="row">
            <div class="col col-5">
                @FlowName(view)
                @PromptEditor(view)
            </div>
            <div class="col col-7">

                <ul class="nav nav-tabs pb-3">
                    @TabNav(TabNameTrigger, "Trigger", view.SelectedTab == TabNameTrigger || view.SelectedTab == "")
                    @TabNav(TabNameInputs, "Inputs", view.SelectedTab == TabNameInputs)
                    @TabNav(TabNamePreview, "Preview", view.SelectedTab == TabNamePreview)
                </ul>
                <div class="tab-content pt-2">
                    @TabPanel(view.SelectedTab == TabNameTrigger || view.SelectedTab == "", RuleBuilder(view))
                    @TabPanel(view.SelectedTab == TabNameInputs, Inputs(view))
                    @TabPanel(view.SelectedTab == TabNamePreview, Preview(view))
                </div>
            </div>
        </div>

        <hr class="text-info mb-4 mt-4"/>

        <div class="row justify-content-center">
            <div class="col col-1">
                <input
                        class="btn btn-primary"
                        type="submit"
                        value="Save"
                />
            </div>
            <div class="col col-1">
                <button
                        class="btn btn-secondary"
                        hx-get="/flows"
                        hx-target="#content-root"
                        hx-push-url="true"
                        hx-confirm="Abandon changes?"
                >
                    Cancel
                </button>
            </div>
        </div>
    </form>
}

templ Preview(view Detail) {
    <h2>{ view.Name }</h2>
    <div class="row">
        <b>Triggered by:</b>
        if len(view.Rules) > 0 {
            <ul>
            for _, rule := range view.Rules {
                <li>{ rule.Field.Source }
                if rule.Field.Value != "" {
                    ({ rule.Field.Value })
                }
                </li>
                <li>{ rule.Condition }</li>
                <li>{ rule.Value }</li>
            }
            </ul>
        } else {
            <span class="text-body-secondary">
                any input
            </span>
        }
    </div>
}



templ TabNav(tabID string, label string, isSelected bool) {
    <li class="nav-item border-bottom">
        <a hx-put={ "/flow-builder/prompt?tab=" + tabID }
           hx-push-url={ "?tab=" + tabID }
            if isSelected {
                class="nav-link active"
                aria-current="page"
            } else {
                class="nav-link"
            }
        >{ label }</a>
    </li>
}

templ TabPanel(isActive bool, cmp templ.Component) {
    <div
        if !isActive {
            class="d-none"
        }
    >
        @cmp
    </div>
}

templ FlowName(view Detail) {

    <div class="form-floating pb-4">
        <input id="flow-name"
                name="name"
               type="text"
               class="form-control"
               placeholder="Welcome Flow"
               value={ view.Name }
        />
        <label for="flow-name">Flow Name</label>
    </div>
}

templ PromptEditor(view Detail) {
    <div class="mb-3" hx-ext="morph">
        <label for="promptEditor" class="form-label">
            Prompt generated by this flow
        </label>
        <div id="highlight-container" class="border rounded mb-1">
            <div id="highlight"></div>
            <div id="promptEditor"
                 contenteditable="true"
                 class="form-control"
                 hx-swap="morph:innerHTML"
                 hx-put="/flow-builder/prompt"
                 hx-trigger="input delay:1100ms from:#promptEditor">{ view.Prompt }</div>
        </div>
        <span class="smaller">
            indicate prompt arguments with <code>%s</code>
        </span>
        <input type="hidden" name="prompt" id="promptInput" value="{ view.Prompt }"/><br/>
    </div>

    <div class="mb-3">
        if len(view.PromptArgs) > 0 {
            <div class="mb-2">
                <label>Prompt Arguments:</label>
            </div>
        }

        for j, arg := range view.PromptArgs {
            <div class="row mb-3">
                <div class="form-floating col">
                    @FieldSelector(fmt.Sprintf("promptArgs-%d", j), "promptArgs", view.SupportedFields, arg.Source.String(), fmt.Sprintf("Argument %d", j))
                </div>
                if arg.Source == flow.FieldSourceFlow {
                    <div class="form-floating col">
                        @FieldSelector(fmt.Sprintf("promptArgFlows-%d", j), "promptArgFlows", view.AvailableFlowsByID, arg.Value, "Flow")
                    </div>
                }
                if arg.Source == flow.FieldSourceInputArg {
                    <div class="form-floating col">
                        <input type="text"
                            name="inputTags"
                            id={ fmt.Sprintf("promptArg-tagKey-%d", j) }
                            hx-trigger="blur"
                            hx-put="/flow-builder/prompt"
                            class="form-control form-control-md"
                            placeholder="myKey"
                            value={ arg.Value }
                        />
                        <label for={ fmt.Sprintf("promptArg-tagKey-%d", j) }>Key name</label>
                    </div>
                }
            </div>
        }
    </div>
    <script>
        updateHighlight();
    </script>
}

templ FlowBuilderScripts() {
    <div hx-script="true">
        <script>
            function updateHighlight() {
                const textArea = document.getElementById('promptEditor');
                const promptInput = document.getElementById('promptInput');
                const highlight = document.getElementById('highlight');
                const text = textArea.innerHTML.replace(/^\s+/, "");
                const highlightedText = text.replace(/(%s)/g, '<span class="highlight">$1</span>');

                promptInput.value = text;
                highlight.innerHTML = highlightedText;
            }

            try {
                window.prmry.AddLiveEventListener('input', 'promptEditor', updateHighlight);
                window.prmry.AddLiveEventListener('scroll', 'promptEditor', function() {
                    document.getElementById("highlight").scrollTop = this.scrollTop;
                });
            } catch(e) {
                console.log(e);
            }

            document.addEventListener("DOMContentLoaded", function() {
                // Initialize
                updateHighlight();
            });
        </script>
    </div>
}
