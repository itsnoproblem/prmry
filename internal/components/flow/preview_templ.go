// Code generated by templ@v0.2.304 DO NOT EDIT.

package flow

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Preview(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		// Element (standard)
		_, err = templBuffer.WriteString("<h2>")
		if err != nil {
			return err
		}
		// StringExpression
		var var_2 string = view.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2>")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<div")
		if err != nil {
			return err
		}
		// Element Attributes
		_, err = templBuffer.WriteString(" class=\"row\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		// Element (standard)
		_, err = templBuffer.WriteString("<b>")
		if err != nil {
			return err
		}
		// Text
		var_3 := `Triggered by:`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b>")
		if err != nil {
			return err
		}
		// If
		if len(view.Rules) > 0 {
			// Element (standard)
			_, err = templBuffer.WriteString("<ul>")
			if err != nil {
				return err
			}
			// For
			for _, rule := range view.Rules {
				// Element (standard)
				_, err = templBuffer.WriteString("<li>")
				if err != nil {
					return err
				}
				// StringExpression
				var var_4 string = rule.Field.Source
				_, err = templBuffer.WriteString(templ.EscapeString(var_4))
				if err != nil {
					return err
				}
				// If
				if rule.Field.Value != "" {
					// Text
					var_5 := `(`
					_, err = templBuffer.WriteString(var_5)
					if err != nil {
						return err
					}
					// StringExpression
					var var_6 string = rule.Field.Value
					_, err = templBuffer.WriteString(templ.EscapeString(var_6))
					if err != nil {
						return err
					}
					// Text
					var_7 := `)`
					_, err = templBuffer.WriteString(var_7)
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</li>")
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<li>")
				if err != nil {
					return err
				}
				// StringExpression
				var var_8 string = rule.Condition
				_, err = templBuffer.WriteString(templ.EscapeString(var_8))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</li>")
				if err != nil {
					return err
				}
				// Whitespace (normalised)
				_, err = templBuffer.WriteString(` `)
				if err != nil {
					return err
				}
				// Element (standard)
				_, err = templBuffer.WriteString("<li>")
				if err != nil {
					return err
				}
				// StringExpression
				var var_9 string = rule.Value
				_, err = templBuffer.WriteString(templ.EscapeString(var_9))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</li>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</ul>")
			if err != nil {
				return err
			}
		} else {
			// Element (standard)
			_, err = templBuffer.WriteString("<span")
			if err != nil {
				return err
			}
			// Element Attributes
			_, err = templBuffer.WriteString(" class=\"text-body-secondary\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			// Text
			var_10 := `any input`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = io.Copy(w, templBuffer)
		}
		return err
	})
}
