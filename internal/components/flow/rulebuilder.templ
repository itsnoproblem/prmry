package flow

import (
    "fmt"

    "github.com/itsnoproblem/prmry/internal/flow"
)

templ RuleBuilder(view Detail) {
    <label>Execute this flow when</label>
    <div class="d-flex justify-content-between">
        <div class="d-flex justify-content-around">
            <div class="form-check pe-4 pt-2">
                if view.RequireAll {
                <input class="form-check-input smaller" type="radio" name="requireAll" id="require-all-true" value="true" checked/>
                } else {
                <input class="form-check-input smaller" type="radio" name="requireAll" id="require-all-true" value="true"/>
                }
                <label class="form-check-label smaller" for="require-all-true">
                    <em>ALL</em> rules match
                </label>
            </div>
            <div class="form-check pt-2">
                if view.RequireAll {
                <input class="form-check-input smaller" type="radio" name="requireAll" id="require-all-false" value="false"/>
                } else {
                <input class="form-check-input smaller" type="radio" name="requireAll" id="require-all-false" value="false" checked/>
                }
                <label class="form-check-label smaller" for="require-all-false">
                    <em>ANY</em> rule matches
                </label>
            </div>
        </div>
        <button id="add-rule"
                hx-post="/flows/new/rules"
                hx-target="#content-root"
                hx-push-url="false"
                class="btn btn-info btn-sm mb-3">
            Add Rule
        </button>
    </div>

    <hr class="text-info mb-5 mt-0"/>

    <div id="rules-container" class="container pb-4">

        if len(view.Rules) == 0 {
            <h2 class="text-body-secondary text-body-secondary">
            No rules yet
            </h2>
        }

        for i, rule := range view.Rules {
            if i > 0 {
                <hr class="text-secondary pb-3"/>
            }
            <div class="row flow-rule fade-in">
            <div class="col">
                <div class="form-floating mb-3">
                    @FieldSelector(fmt.Sprintf("fieldName-%d", i), "fieldName", view.SupportedFields, rule.Field.Source, "Source")
                </div>
                if rule.Field.Source == flow.FieldSourceFlow.String() {
                    <div class="form-floating mb-3">
                    @FieldSelector(fmt.Sprintf("selectedFlos-%d", i), "selectedFlows", view.AvailableFlowsByID, rule.Field.Value, "Flow")
                </div>
                }
                if rule.Field.Source == flow.FieldSourceInputTag.String() {
                    @FieldSelector(fmt.Sprintf("tagKey-%d", i), "inputTags", view.AvailableTags(), rule.Field.Value, "Flow")
                }
            </div>
            <div class="col">
                <div class="form-floating mb-3">
                    @FieldSelector(fmt.Sprintf("condition-%d", i), "condition", view.SupportedConditions, rule.Condition, "Condition")
                </div>
            </div>
            <div class="col">
                <div class="form-floating mb-3">
                    <input  type="text"
                            name="value"
                            id={ fmt.Sprintf("value-%d", i) }
                            class="form-control form-control-md"
                            placeholder="Value"
                            value={ rule.Value }/>
                    <label for={ fmt.Sprintf("value-%d", i) }>Value</label>
                </div>
            </div>
            <div class="col-1 pt-3">
                <a  hx-delete={ fmt.Sprintf("/flows/new/rules/%d", i) }
                    hx-target="#content-root"
                    class="button-secondary"
                >
                    <i class="fa fa-close"></i>
                </a>
            </div>
        </div>
        }
    </div>
}
