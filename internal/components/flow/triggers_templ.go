// Code generated by templ@v0.2.334 DO NOT EDIT.

package flow

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"

	"github.com/itsnoproblem/prmry/internal/flow"
)

func RuleBuilder(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"p-4 ps-2\"><div class=\"row\"><div class=\"col text-left\"><label for=\"require-all\" class=\"pt-1 pe-2 larger\">")
		if err != nil {
			return err
		}
		var_2 := `Execute this flow when`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select name=\"requireAll\" id=\"require-all\" class=\"rounded p-1\" placeholder=\"Choose...\">")
		if err != nil {
			return err
		}
		if view.RequireAll {
			_, err = templBuffer.WriteString("<option value=\"true\" selected>")
			if err != nil {
				return err
			}
			var_3 := `All rules match`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option> <option value=\"false\">")
			if err != nil {
				return err
			}
			var_4 := `Any rule matches`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<option value=\"true\">")
			if err != nil {
				return err
			}
			var_5 := `All rules match`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option> <option value=\"false\" selected>")
			if err != nil {
				return err
			}
			var_6 := `Any rule matches`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select><button id=\"add-rule\" hx-post=\"/flow-builder/rules\" hx-target=\"#content-root\" hx-push-url=\"false\" class=\"btn btn-info btn-sm ms-3\">")
		if err != nil {
			return err
		}
		var_7 := `Add Rule`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></div></div><div id=\"rules-container\" class=\"container p-4 ps-2\">")
		if err != nil {
			return err
		}
		if len(view.Rules) == 0 {
			_, err = templBuffer.WriteString("<div class=\"text-left\"><h2 class=\"pb-2 text-body-secondary\">")
			if err != nil {
				return err
			}
			var_8 := `Flow always executes`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h2><div><em>")
			if err != nil {
				return err
			}
			var_9 := `Create a rule to add conditions.`
			_, err = templBuffer.WriteString(var_9)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</em></div></div>")
			if err != nil {
				return err
			}
		}
		for i, rule := range view.Rules {
			if i > 0 {
				_, err = templBuffer.WriteString("<hr class=\"text-secondary pb-3\">")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" <div class=\"row flow-rule fade-in\"><div class=\"col\"><div class=\"form-floating mb-3\">")
			if err != nil {
				return err
			}
			err = FieldSelector(fmt.Sprintf("fieldName-%d", i), "fieldName", view.SupportedFields, rule.Field.Source, "Source").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if rule.Field.Source == flow.FieldSourceFlow.String() {
				_, err = templBuffer.WriteString("<div class=\"form-floating mb-3\">")
				if err != nil {
					return err
				}
				err = FieldSelector(fmt.Sprintf("selectedFlos-%d", i), "selectedFlows", view.AvailableFlowsByID, rule.Field.Value, "Flow").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			if rule.Field.Source == flow.FieldSourceInputArg.String() {
				_, err = templBuffer.WriteString("<div class=\"form-floating mb-3\">")
				if err != nil {
					return err
				}
				err = FieldSelector(fmt.Sprintf("ruleInputParams-%d", i), "ruleInputParams", view.InputParams.Map(), rule.Field.Value, "Param name").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div><div class=\"col\"><div class=\"form-floating mb-3\">")
			if err != nil {
				return err
			}
			err = FieldSelector(fmt.Sprintf("condition-%d", i), "condition", view.SupportedConditions, rule.Condition, "Condition").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div><div class=\"col\"><div class=\"form-floating mb-3\"><input type=\"text\" name=\"value\" id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("value-%d", i)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"form-control form-control-md\" placeholder=\"Value\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(rule.Value))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("value-%d", i)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_10 := `Value`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label></div></div><div class=\"col-1 pt-3\"><a hx-delete=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/flow-builder/rules/%d", i)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"#content-root\" class=\"button-secondary\"><i class=\"fa fa-close\"></i></a></div></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
