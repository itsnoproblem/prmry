// Code generated by templ@v0.2.334 DO NOT EDIT.

package flow

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
)

func iToS(i int) string {
	return fmt.Sprintf("%d", i)
}

func Inputs(view Detail) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"row p-1\"><div class=\"col-7\"><h3>")
		if err != nil {
			return err
		}
		var_2 := `flows can receive input parameters, along with the input message.`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h3></div><div class=\"col-2\"><button class=\"btn btn-info\" hx-post=\"/flow-builder/inputs\">")
		if err != nil {
			return err
		}
		var_3 := `Add Input`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div><div class=\"col-3\"></div></div><div class=\"row p-1 justify-content-start\">")
		if err != nil {
			return err
		}
		for i, param := range view.InputParams {
			_, err = templBuffer.WriteString("<div class=\"col-9 form-floating pb-4\"><input id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("input-param-" + iToS(i)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" name=\"inputParams\" type=\"text\" class=\"form-control\" placeholder=\"inputKey\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(param.Key))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><label for=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("input-param-" + iToS(i)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_4 := `Input Parameter `
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			var var_5 string = iToS(i)
			_, err = templBuffer.WriteString(templ.EscapeString(var_5))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label></div> <div class=\"col-2 pb-4\"><button class=\"btn btn-lg btn-secondary\" hx-delete=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("/flow-builder/inputs/" + iToS(i)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_6 := `&mdash;`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></div> <div class=\"col-1\"></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
