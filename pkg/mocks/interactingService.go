// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"
	interaction2 "github.com/itsnoproblem/prmry/pkg/interaction"

	mock "github.com/stretchr/testify/mock"
)

// interactingService is an autogenerated mock type for the interactingService type
type interactingService struct {
	mock.Mock
}

// Interaction provides a mock function with given fields: ctx, interactionID
func (_m *interactingService) Interaction(ctx context.Context, interactionID string) (interaction2.Interaction, error) {
	ret := _m.Called(ctx, interactionID)

	var r0 interaction2.Interaction
	if rf, ok := ret.Get(0).(func(context.Context, string) interaction2.Interaction); ok {
		r0 = rf(ctx, interactionID)
	} else {
		r0 = ret.Get(0).(interaction2.Interaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, interactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Interactions provides a mock function with given fields: ctx
func (_m *interactingService) Interactions(ctx context.Context) ([]interaction2.Summary, error) {
	ret := _m.Called(ctx)

	var r0 []interaction2.Summary
	if rf, ok := ret.Get(0).(func(context.Context) []interaction2.Summary); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interaction2.Summary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Moderation provides a mock function with given fields: ctx, interactionID
func (_m *interactingService) Moderation(ctx context.Context, interactionID string) (interaction2.Moderation, error) {
	ret := _m.Called(ctx, interactionID)

	var r0 interaction2.Moderation
	if rf, ok := ret.Get(0).(func(context.Context, string) interaction2.Moderation); ok {
		r0 = rf(ctx, interactionID)
	} else {
		r0 = ret.Get(0).(interaction2.Moderation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, interactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModerationByID provides a mock function with given fields: ctx, moderationID
func (_m *interactingService) ModerationByID(ctx context.Context, moderationID string) (interaction2.Moderation, error) {
	ret := _m.Called(ctx, moderationID)

	var r0 interaction2.Moderation
	if rf, ok := ret.Get(0).(func(context.Context, string) interaction2.Moderation); ok {
		r0 = rf(ctx, moderationID)
	} else {
		r0 = ret.Get(0).(interaction2.Moderation)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, moderationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewInteractingService interface {
	mock.TestingT
	Cleanup(func())
}

// newInteractingService creates a new instance of interactingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newInteractingService(t mockConstructorTestingTnewInteractingService) *interactingService {
	mock := &interactingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
